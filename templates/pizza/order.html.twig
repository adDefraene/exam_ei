{% extends 'base.html.twig' %}

{% block title %}Commander{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="/css/jquery.timepicker.css">
{% endblock %}

{% block body %}
    <div class="container-fluid">
        <h1>ORDER</h1>
        <div class="row">
            <div class="col-6 offset-1">
                <h2 class="order-h2 text-center">MY PIZZAS</h2>
                <div class="pizzas">
                    <div class="order-pizza container-fluid mb-3">
                        <div class="row">
                            <div class="col-6 offset-3">
                                <div class="row">
                                    <h3 class="col-3 text-center">PIZZA:</h3>
                                    <select name="order-pizzas" class="col-8 order-pizzas">
                                        {% for pizza in pizzas %}
                                            <option
                                                {% if app.request.get('pizza') == pizza.slug %} selected {% endif %}
                                                value="{{pizza.id}}"
                                                price="{% if pizza.type == "PROMO" %}{{pizza.price * 0.75}}{% else %}{{pizza.price}}{% endif %}"
                                                ingredients="{{pizza.getIngredientsJSON}}"
                                            >{{pizza.name}}{% if pizza.type == "POTM" %} (PDM){% endif %}
                                            </option>
                                        {% endfor %}
                                    </select>
                                </div>
                                <hr>
                            </div>
                            <div class="col-3 order-delete">X</div>
                            <div class="col">
                                <h3 class="text-center">INGREDIENTS:</h3>
                                <div class="container-fluid">
                                    <div class="row order-ingredients">
                                        {% for ingredient in ingredients %}
                                            <div class="col m-2 order-ingredients-buttons btn" price="{{ingredient.price}}" id="{{ingredient.id}}">{{ingredient.name}}</div>
                                        {% endfor %}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="order-add-pizza p-1 my-3 text-center">+</div>
            </div>
            <div class="col-4">
                <h2 class="order-h2">MY DETAILS</h2>
                {{form_start(orderForm)}}
                    <div class="row">
                        <div class="col-6 p-3 text-center order-details order-details-active">MA COMMANDE SERA EMPORTÉE</div>
                        <div class="col-6 p-3 text-center order-details" id="order-delivered">MA COMMANDE SERA LIVRÉE (+3€)</div>
                        <div class="col-12 p-3 my-3 text-center order-hour">
                            <div class="row">
                                <div class="col">HEURE DE RÉSERVATION</div>
                                <div class="col">
                                    {{form_widget(orderForm.date)}}
                                </div>
                            </div>
                        </div>
                        <div class="col-6 offset-3 p-3 my-5 text-center order-total">Total : <span id="order-amount"></span>
                        </div>
                        <input class="col-12 p-3 btn order-button" type="submit" value="PRENDRE MA COMMANDE">
                    </div>
                {{form_end(orderForm)}}
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    <script src="/js/jquery.timepicker.min.js"></script>
    <script>
    // When document has loaded
        $('document').ready(function(){

            // Function that operates the total amount of the order and the JSON string needed for the insert of the "orderItems"
            function getTotal(){
                // Defines our vars
                let total = 0; // The total amount of the order
                let order = [] // The array of our "orderItems" to convert in JSON

                // Select all of our "orderItems", so for each item
                document.querySelectorAll(".order-pizza").forEach(function(orderElem, numberOfItem){
                    // Each order item is an object in the original array
                    order[numberOfItem] = {}

                    // Get the selected pizza
                    orderElem.querySelectorAll("select option").forEach(function(pizza){
                        if(pizza.selected === true){
                            // Adds its value to the total
                            total += (parseFloat(pizza.attributes.price.value)) // The price is sent in an attribute
                            // Adds it id as the "pizzaId" key
                            order[numberOfItem]["pizzaId"] = (parseInt(pizza.value)) // The id is the value of the option
                        }
                    })

                    // Get each sup ingredients
                    
                    //Set them as an array of their id, for the second key "ingredients"
                    order[numberOfItem]["ingredients"] = []

                    // For each sup ingredient selected
                    orderElem.querySelectorAll(".ingredient-active").forEach(function(ingredientSup, numberOfIngredient){
                        // Add its value to the total
                        total += (parseFloat(ingredientSup.attributes.price.value))
                        // Adds its id to the array of the second key
                        order[numberOfItem]["ingredients"][numberOfIngredient] = (parseInt(ingredientSup.attributes.id.value))
                    })
                })

                // Checks if the "delivered" or "take-away" button is active
                if(document.querySelector("#order-delivered").classList.contains("order-details-active")){
                    // If delivered
                    total += 3 // Adds the 3€ fees to the total amount
                    document.querySelector("#order_ifDelivered").value = 1 // sets the "true" value for the "ifDelivered" field
                } else{
                    // If take-away
                    document.querySelector("#order_ifDelivered").value = 0 // sets the "false" value for the "ifDelivered" field
                }

                // Round the total amount
                total = (Math.ceil(total*100))/100
                // Reset the total box content
                document.querySelector("#order-amount").innerText = ""        
                // Set the total box content with the total amount
                document.querySelector("#order-amount").innerText = total+"€"
                
                // Translate our array of "itemObjects" in JSON and send its value to the dedicated hidden input
                document.querySelector("#order_orderItemsJson").value = JSON.stringify(order)
            }

            // Sets the event of delete to the pizza / elem = the pizza to add the event
            function setsDeletePizza(elem){
                // Select the delete cross
                if(elem.querySelector(".order-delete")){
                    // Adds its click event
                    elem.querySelector(".order-delete").addEventListener("click", function(){
                        // Remove the pizza
                        elem.remove()
                        // Re-operate the total amount because it has changed
                        getTotal()
                    })
                }
            }
                        
            // Disables the sup ingredients that are already in the pizza / elem = the triggered pizza / objPizza = the select tag
            function setIngredientsForPizza(elem, objPizzas){
                // For each of the options
                Object.keys(objPizzas).forEach(function(pizza){
                    // Get the selected pizza
                    if(objPizzas[pizza].selected === true){
                        // Get the converted value of the array of the ingredients ids sets in an attribute in the pizza's option tag
                        let ingredientsinPizza = JSON.parse(objPizzas[pizza].attributes['ingredients'].value)
                        // For each ingredients of the pizza
                        ingredientsinPizza.forEach(function(ingredientInPizza){
                            // Gets all of the ingredients in the choice list
                            let ingredientsButtons = elem.querySelector(".order-ingredients").children
                            // For each of the ingredients buttons
                            Object.keys(ingredientsButtons).forEach(function(ingredientButton){
                                // If the ingredient button correspond to one of the ingredients of the pizza
                                if(ingredientInPizza === (ingredientsButtons[ingredientButton].innerText)){
                                    // Disables it
                                    ingredientsButtons[ingredientButton].classList.add("disabled")
                                }
                                getTotal()
                            })
                        })
                    }
                })
                
            }

            // Function that re-enables the disabled or choosen ingredients buttons
            function resetIngredientsForPizza(elem){
                // So for each disabled button
                elem.querySelectorAll(".disabled").forEach(function(ingredientsToEnable){
                    // Remove the disable class
                    ingredientsToEnable.classList.remove("disabled")
                })
                // So for each choosen ingredients
                elem.querySelectorAll(".ingredient-active").forEach(function(buttonToDisable){
                    // Remove the selected class
                    buttonToDisable.classList.remove("ingredient-active")
                })
                // The total amount has changed
                getTotal()
            }

            // Function that enables-disables the sup ingredients
            function addSupIngredients(elem){
                // for each ingredient buttons
                elem.querySelectorAll(".order-ingredients-buttons").forEach(function(button){
                    // Add the clickable event
                    button.addEventListener("click", function lol (event){
                        // if not disabled (because is not part of the actual pizza)
                        if(!event.explicitOriginalTarget.classList.contains("disabled")){
                            // Toggle the class "active"
                            event.explicitOriginalTarget.classList.toggle("ingredient-active")
                            // The total amount has changed
                        }
                        getTotal()
                    })
                })
            }

            // Resets the changements when the selected pizza has changed
            function setSelectPizza(elem){
                // For each "orderItem"
                let objPizzas = elem.querySelector("select")
                // When the pizza has changed
                objPizzas.addEventListener("change", function(){
                    // Resets its buttons
                    resetIngredientsForPizza(elem)
                    // Re-disables the pizza's actual ingredients
                    setIngredientsForPizza(elem, objPizzas)
                    })
                // Does it one time when first launched
                setIngredientsForPizza(elem, objPizzas)
            }
            
            // Gives the event function to the "orderItems"
            function setsFunctions(elem){
                setsDeletePizza(elem)
                setSelectPizza(elem)
                addSupIngredients(elem)
            }

            // Select the first pizza in the order
            const PIZZA_FORM = document.querySelector(".order-pizza")
            // Give its event functions
            setsFunctions(PIZZA_FORM)

            // Selects the "+" button, and adds on more item
            document.querySelector(".order-add-pizza").addEventListener("click", function(){
                // Clone the first item
                let newPizzaForm = PIZZA_FORM.cloneNode(true)
                // Sets its event functions
                setsFunctions(newPizzaForm)
                // Append it in the DOM
                document.querySelector(".pizzas").appendChild(newPizzaForm)
                // The total amount has changed
                getTotal();
            })

            // Events given to the delivery options
            let deliveryButtons = document.querySelectorAll(".order-details")
            // For each delivry options
            deliveryButtons.forEach(function(deliveryButton){
                // Add a click event
                deliveryButton.addEventListener("click", function(){
                    // If not activated
                    if(!deliveryButton.classList.contains("order-details-active")){
                        // Toggle the classes for the options
                        deliveryButtons.forEach(function(againButtons){
                            // Do the change
                            againButtons.classList.toggle("order-details-active")
                        })
                    }
                    // The total amount has changed
                    getTotal()
                })
            })

        // Get the date format of "today"
            let reservationDate = new Date()

        /*
            $("#hourPicker").timepicker({
                'disableTextInput' : true,
                'useSelect' : true,
                'timeFormat' : "H:i",
                'minTime': '11:30am',
                'maxTime': '10:00pm',
                'step' : 15,
                'disableTimeRanges' : [
                    ['2pm', '5:45pm'],
                ]
            });

            let hourPicker = document.querySelector(".ui-timepicker-select")

            
            //{% for order in orders %}
            Object.keys(hourPicker).forEach(function(item){

                let getDisabledHour = '20:45';
                if(hourPicker[item].value === getDisabledHour ){
                    hourPicker[item].setAttribute("disabled", "")
                }
            })
            //{% endfor %}

            document.querySelector("#order_date").value = reservationDate;
        */
            // Let's correct the month
            let correctMonth = reservationDate.getUTCMonth(this) + 1
            // Sets the Date, Month and Year to the correct inputs
            document.querySelector("#order_date #order_date_date_day").value = reservationDate.getUTCDate(this)
            document.querySelector("#order_date #order_date_date_day").setAttribute("readonly", true)
            document.querySelector("#order_date #order_date_date_month").value = correctMonth
            document.querySelector("#order_date #order_date_date_month").setAttribute("readonly", true)
            document.querySelector("#order_date #order_date_date_year").value = reservationDate.getUTCFullYear(this)
            document.querySelector("#order_date #order_date_date_year").setAttribute("readonly", true)

            // Format our hours schedules
            document.querySelector("#order_date #order_date_time_hour").childNodes.forEach(function(hour){
                // Disables the older hours
                if(reservationDate.getHours(this) > hour.value){ 
                    hour.setAttribute("disabled", true)
                }
                // DIsables hours when not in service
                if (hour.value <= 11 && hour.value >= 0){
                    hour.setAttribute("disabled", true)
                } else if(hour.value >= 14 && hour.value <= 17){
                    hour.setAttribute("disabled", true)
                } else if (hour.value >= 22){   
                    hour.setAttribute("disabled", true)
                }
            })
            // Select our schedule for each 10 minutes
            document.querySelector("#order_date #order_date_time_minute").childNodes.forEach(function(minute){
                // Setting a 10 minutes/order schedule
                if(minute.value % 10 > 0){
                    minute.setAttribute("disabled", true)
                }
            })
            // Set the total for the first time
            getTotal()

        });
    </script>
{% endblock %}
